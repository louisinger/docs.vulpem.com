(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{80:function(n,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return o})),t.d(e,"metadata",(function(){return s})),t.d(e,"toc",(function(){return c})),t.d(e,"default",(function(){return l}));var a=t(3),r=t(7),i=(t(0),t(86)),o={id:"transaction",title:"Transaction",image:"/img/marina_logo.svg"},s={unversionedId:"marina/transaction",id:"marina/transaction",isDocsHomePage:!1,title:"Transaction",description:"Send to an address",source:"@site/docs/marina/transaction.md",slug:"/marina/transaction",permalink:"/marina/transaction",editUrl:"https://github.com/vulpemventures/docs.vulpem.com/edit/master/docs/docs/marina/transaction.md",version:"current",sidebar:"docs",previous:{title:"Display Balances",permalink:"/marina/balances"},next:{title:"API",permalink:"/marina/api"}},c=[{value:"Send to an address",id:"send-to-an-address",children:[]},{value:"Custom transaction",id:"custom-transaction",children:[]}],d={toc:c};function l(n){var e=n.components,t=Object(r.a)(n,["components"]);return Object(i.b)("wrapper",Object(a.a)({},d,t,{components:e,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"send-to-an-address"},"Send to an address"),Object(i.b)("p",null,"You can delegate Marina to create, fund, blind, sign and broadcast a Liquid transaction to a recipient. You do not need to know anything about current balance, although is suggetsed to retrieve and display the ",Object(i.b)("a",{parentName:"p",href:"/marina/balances"},"balances")," in your application for better UX and to check beforehand for sufficient funds."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},'// confidential address\nconst recipient = "el1qq2c6wq4qr32vgnd5zz9kc3a9n5ancmwak66zt35vvxa7hyemqw773mtlp8z0mmwm6y5tfcq53qv5y9rfq83kqfwwquxvepy6g"\n\n// this is the L-BTC from Nigiri RegTest, which runs liquidregtest in elements.conf\nconst BtcLiquidRegtest = "5ac9f65c0efcc4775e0baec4ec03abdde22473cd3cf33c0419ca290e0751b225"\n\n// amount in satoshis\nconst amount = 700000\n\n// Send 0.007 LBTC to an address\nconst txHash = await window.marina.sendTransaction(\n  recipient,\n  amount,\n  BtcLiquidRegtest,\n);\n\nconsole.log(txHash);\n')),Object(i.b)("p",null,"This will prompt the user to allow blinding & signing a transaction."),Object(i.b)("img",{src:"/img/marina_spend.png",alt:"Marina Spend",width:"300"}),Object(i.b)("p",null,"If the prompt is accepted, will be possible to send the transaction"),Object(i.b)("h2",{id:"custom-transaction"},"Custom transaction"),Object(i.b)("p",null,"Developers can build custom transactions using the unspents of the exposed addresses and can delegate Marina to sign with the user consent."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { Psbt, networks, BlindingDataLike } from 'liquidjs-lib';\n\n// Empty psbt elements\nconst psbt = new liquid.Psbt({ network: networks.regtest });\n\n// Add inputs got from marina and outputs \npsbt.addInput({\n  //...\n});\npsbt.addOutput({\n  // ...\n});\n\n\n// Let's blind all the outputs. The order is important (same of output and some blinding key)\n// The marina blinding private key is an hex string, we need to pass to Buffer.\nawait psbt.blindOutputs(\n  [\n    Buffer.from(blindingPrivateKeyOfMarinaInput, 'hex')\n  ],\n  [\n    blindingPublicKeyOfMarinaChangeAddress,\n    blindingPublicKeyOfRecipientAddress,\n  ]\n);\n\n// encode to base64\nconst encodedTx = psbt.toBase64();\n        \n// now you can sign with Marina\nconst signedTx = await window.marina.signTransaction(encodedTx);\n")),Object(i.b)("p",null,"This will prompt the user to allow signing the custom transaction"),Object(i.b)("img",{src:"/img/marina_spend.png",alt:"Marina Spend",width:"300"}),Object(i.b)("p",null,"If the prompt is accepted, will be possible to retrieve the signed base64 transaction"))}l.isMDXComponent=!0},86:function(n,e,t){"use strict";t.d(e,"a",(function(){return u})),t.d(e,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function o(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(n);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,a)}return t}function s(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?o(Object(t),!0).forEach((function(e){i(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,a,r=function(n,e){if(null==n)return{};var t,a,r={},i=Object.keys(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||(r[t]=n[t]);return r}(n,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);for(a=0;a<i.length;a++)t=i[a],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(r[t]=n[t])}return r}var d=r.a.createContext({}),l=function(n){var e=r.a.useContext(d),t=e;return n&&(t="function"==typeof n?n(e):s(s({},e),n)),t},u=function(n){var e=l(n.components);return r.a.createElement(d.Provider,{value:e},n.children)},p={inlineCode:"code",wrapper:function(n){var e=n.children;return r.a.createElement(r.a.Fragment,{},e)}},b=r.a.forwardRef((function(n,e){var t=n.components,a=n.mdxType,i=n.originalType,o=n.parentName,d=c(n,["components","mdxType","originalType","parentName"]),u=l(t),b=a,m=u["".concat(o,".").concat(b)]||u[b]||p[b]||i;return t?r.a.createElement(m,s(s({ref:e},d),{},{components:t})):r.a.createElement(m,s({ref:e},d))}));function m(n,e){var t=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var i=t.length,o=new Array(i);o[0]=b;var s={};for(var c in e)hasOwnProperty.call(e,c)&&(s[c]=e[c]);s.originalType=n,s.mdxType="string"==typeof n?n:a,o[1]=s;for(var d=2;d<i;d++)o[d]=t[d];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,t)}b.displayName="MDXCreateElement"}}]);